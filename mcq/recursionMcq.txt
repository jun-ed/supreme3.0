1) Which of the following is a base case in recursion?

A. The case where the function continues to call itself
B. The case where the function returns without making a further call to itself
C. The case where the function calls another function
D. The case where the function performs a loop operation


2) What is the main advantage of using recursion over iteration?

A. Recursion uses less memory
B. Recursion makes the code easier to write and understand for problems that have a recursive nature
C. Recursion is always faster than iteration
D. Recursion avoids all types of errors


3) Which of the following is NOT a property of a well-defined recursive function?

A. It has a base case
B. Each recursive call makes progress towards the base case
C. It performs iterative loops before the recursive call
D. It calls itself within the function body


4) What will be the output of the following code snippet?

public class RecursionExample {
    
    public static int factorial(int n) {
        if (n == 0) {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    }

    public static void main(String[] args) {
        System.out.println(factorial(3));
    }
}

A. 0
B. 3
C. 6
D. 9


5) What will be the output of the following code snippet?

public class RecursionExample {
    public static void main(String[] args) {
        System.out.println(sum(5));
    }
    
    public static int sum(int n) {
        if (n <= 1) {
            return n;
        } else {
            return n + sum(n - 1);
        }
    }
}
A. 5
B. 10
C. 15
D. 20


6) What will be the output of the following code snippet?

public class RecursionExample {
    public static void main(String[] args) {
        System.out.println(gcd(48, 18));
    }
    
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
A. 6
B. 12
C. 18
D. 24


7) What will be the output of the following code snippet?

public class RecursionExample {
    public static void main(String[] args) {
        System.out.println(fibonacci(10));
    }
    
    public static int fibonacci(int n) {
        if (n <= 1) {
            return n;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }
}
A. 21
B. 55
C. 33
D. 88


8) what will be the output of the following code snippet?

public class RecursionExample {
    public static void main(String[] args) {
        System.out.println(sumOfDigits(1234));
    }
    
    public static int sumOfDigits(int n) {
        if (n == 0) {
            return 0;
        } else {
            return n % 10 + sumOfDigits(n / 10);
        }
    }
}
A. 6
B. 7
C. 8
D. 10


9) What will be the output of the following code snippet?

public class RecursionExample {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        System.out.println(binarySearch(arr, 0, arr.length - 1, 4));
    }
    
    public static int binarySearch(int[] arr, int low, int high, int key) {
        if (low > high) {
            return -1;
        }
        int mid = (low + high) / 2;
        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] > key) {
            return binarySearch(arr, low, mid - 1, key);
        } else {
            return binarySearch(arr, mid + 1, high, key);
        }
    }
}

A. 1
B. 2
C. 3
D. 4


10) What will be the output of the following code snippet?

java
Copy code
public class RecursionExample {
    public static void main(String[] args) {
        System.out.println(isPalindrome("racecar"));
    }
    
    public static boolean isPalindrome(String s) {
        if (s.length() <= 1) {
            return true;
        } else if (s.charAt(0) != s.charAt(s.length() - 1)) {
            return false;
        } else {
            return isPalindrome(s.substring(1, s.length() - 1));
        }
    }
}
A. true
B. false
C. null
D. exception



